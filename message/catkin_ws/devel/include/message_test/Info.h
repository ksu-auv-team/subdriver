// Generated by gencpp from file message_test/Info.msg
// DO NOT EDIT!


#ifndef MESSAGE_TEST_MESSAGE_INFO_H
#define MESSAGE_TEST_MESSAGE_INFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace message_test
{
template <class ContainerAllocator>
struct Info_
{
  typedef Info_<ContainerAllocator> Type;

  Info_()
    : scores()
    , boxes()
    , classes()
    , detected()  {
    }
  Info_(const ContainerAllocator& _alloc)
    : scores(_alloc)
    , boxes(_alloc)
    , classes(_alloc)
    , detected(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _scores_type;
  _scores_type scores;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _boxes_type;
  _boxes_type boxes;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _classes_type;
  _classes_type classes;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _detected_type;
  _detected_type detected;





  typedef boost::shared_ptr< ::message_test::Info_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::message_test::Info_<ContainerAllocator> const> ConstPtr;

}; // struct Info_

typedef ::message_test::Info_<std::allocator<void> > Info;

typedef boost::shared_ptr< ::message_test::Info > InfoPtr;
typedef boost::shared_ptr< ::message_test::Info const> InfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::message_test::Info_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::message_test::Info_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace message_test

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'message_test': ['/home/osboxes/subdriver2018/message/catkin_ws/src/message_test/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::message_test::Info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::message_test::Info_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::message_test::Info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::message_test::Info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::message_test::Info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::message_test::Info_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::message_test::Info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c873532b9ae33423f8d1b3d0ddf4f322";
  }

  static const char* value(const ::message_test::Info_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc873532b9ae33423ULL;
  static const uint64_t static_value2 = 0xf8d1b3d0ddf4f322ULL;
};

template<class ContainerAllocator>
struct DataType< ::message_test::Info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "message_test/Info";
  }

  static const char* value(const ::message_test::Info_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::message_test::Info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32[] scores\n\
int32[] boxes\n\
int32[] classes\n\
int32[] detected\n\
";
  }

  static const char* value(const ::message_test::Info_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::message_test::Info_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.scores);
      stream.next(m.boxes);
      stream.next(m.classes);
      stream.next(m.detected);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Info_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::message_test::Info_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::message_test::Info_<ContainerAllocator>& v)
  {
    s << indent << "scores[]" << std::endl;
    for (size_t i = 0; i < v.scores.size(); ++i)
    {
      s << indent << "  scores[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.scores[i]);
    }
    s << indent << "boxes[]" << std::endl;
    for (size_t i = 0; i < v.boxes.size(); ++i)
    {
      s << indent << "  boxes[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.boxes[i]);
    }
    s << indent << "classes[]" << std::endl;
    for (size_t i = 0; i < v.classes.size(); ++i)
    {
      s << indent << "  classes[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.classes[i]);
    }
    s << indent << "detected[]" << std::endl;
    for (size_t i = 0; i < v.detected.size(); ++i)
    {
      s << indent << "  detected[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.detected[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MESSAGE_TEST_MESSAGE_INFO_H
